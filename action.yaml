name: Deploy Node.js
description: Deploys a Node.js application

inputs:
  registry-username:
    description: Registry username
    required: true
  registry-password:
    description: Registry password
    required: true
  npm-registry-url:
    description: NPM registry URL
    required: true
    default: https://registry.master-software.de/repository/npm-msoft
  docker-registry-url:
    description: Docker registry URL
    required: true
  build-args:
    description: Additional build arguments
    required: false
    default: ""

outputs:
  image-tag:
    description: Image tag
    value: ${{ steps.publish-image.outputs.image-tag }}

runs:
  using: composite
  steps:
    - name: Detect application
      shell: bash
      run: |
        if grep -s -q lfs .gitattributes; then
          echo "lfs-enabled=true" >> $GITHUB_ENV
        else
          echo "lfs-enabled=false" >> $GITHUB_ENV
        fi

        if [ -f nest-cli.json ]; then
          echo "application-type=nestjs" >> $GITHUB_ENV
        elif [ -f nuxt.config.ts ]; then
          echo "application-type=nuxt" >> $GITHUB_ENV
        elif [ -f astro.config.ts ]; then
          echo "application-type=astro" >> $GITHUB_ENV
        elif [ -f package.json ]; then
          echo "application-type=nodejs" >> $GITHUB_ENV
        else
          echo "::error Type of application could not be detected"
        fi

    - name: Checkout LFS
      if: ${{ env.lfs-enabled == 'true' }}
      shell: bash
      run: git lfs pull

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        scope: master-software
        node-version-file: .nvmrc
        registry-url: ${{ inputs.npm-registry-url }}

    - id: generate-token
      name: Generate NPM token
      uses: master-software-gmbh/npm-token-action@v1.0.0
      with:
        username: ${{ inputs.registry-username }}
        password: ${{ inputs.registry-password }}
        registry-url: ${{ inputs.npm-registry-url }}

    - name: Copy files to context
      shell: bash
      run: |
        cp $NPM_CONFIG_USERCONFIG .
        TSCONFIG_PATH=${{ github.action_path }}/${{ env.application-type }}/tsconfig.build.json
        [[ -e $TSCONFIG_PATH ]] && cp $TSCONFIG_PATH .

    - id: format-build-args
      name: Format build args list
      shell: bash
      run: |
        BUILD_ARGS_LIST=$(echo -n "${{ inputs.build-args }}" | tr -s '\n[:blank:]' ',')
        echo "build-args=$BUILD_ARGS_LIST" >> $GITHUB_OUTPUT

    - name: Generate Dockerfile
      uses: master-software-gmbh/ejs-template-action@v1.0.0
      with:
        template-path: ${{ github.action_path }}/${{ env.application-type }}/Dockerfile
        output-path: Dockerfile
        json-data: |
          {
            "buildArgs": "${{ steps.format-build-args.outputs.build-args }}",
            "registry": "${{ inputs.docker-registry-url }}"
          }

    - id: publish-image
      name: Publish Docker image
      uses: master-software-gmbh/docker-publish-action@v1
      with:
        manifest-file: package.json
        registry-username: ${{ inputs.registry-username }}
        registry-password: ${{ inputs.registry-password }}
        docker-registry-url: ${{ inputs.docker-registry-url }}
        build-args: |
          NODE_AUTH_TOKEN=${{ steps.generate-token.outputs.npm-token }}
          ${{ inputs.build-args }}
